{"ast":null,"code":"import React, { useState, useEffect, useCallback } from \"react\";\nimport { API_URL, API_KEY } from \"../../config\";\nexport const useMovieFetch = movieId => {\n  const [state, setState] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const fetchData = useCallback(async () => {\n    // voordat je de data ophaalt\n    setError(false);\n    setLoading(true); // ophalen van de gegevens in een try {} catch(error) {} block\n\n    try {\n      //ophalen van de movie gegevens obv movieId\n      const endpoint = `${API_URL}movie/${movieId}?api_key=${API_KEY}`;\n      const result = await (await fetch(endpoint)).json();\n      console.log(result); //ophalen van de credits gegevens obv movieId\n\n      const creditsEndpoint = `${API_URL}movie/${movieId}/credits?api_key=${API_KEY}`;\n      const creditsResult = await (await fetch(creditsEndpoint)).json();\n      console.log(creditsResult);\n    } catch (error) {\n      setError(true);\n    } // nadat je de gegevens hebt opgehaald\n\n\n    setLoading(false);\n  }, // gegevens alleen ophalen als de movieId verandert\n  [movieId]); // uitvoeren van de functie fetchData\n\n  useEffect(() => {\n    fetchData();\n  }, [fetchData]); //teruggeven van de data\n\n  return [state, loading, error];\n};","map":{"version":3,"sources":["C:/Users/Jook/reactprojects/reactmovieapp/movieapp/src/components/hooks/useMovieFetch.js"],"names":["React","useState","useEffect","useCallback","API_URL","API_KEY","useMovieFetch","movieId","state","setState","loading","setLoading","error","setError","fetchData","endpoint","result","fetch","json","console","log","creditsEndpoint","creditsResult"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,WAArC,QAAwD,OAAxD;AACA,SAASC,OAAT,EAAkBC,OAAlB,QAAiC,cAAjC;AAEA,OAAO,MAAMC,aAAa,GAAIC,OAAD,IAAa;AACxC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACW,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,KAAD,CAAlC;AAEA,QAAMa,SAAS,GAAGX,WAAW,CAC3B,YAAY;AACV;AACAU,IAAAA,QAAQ,CAAC,KAAD,CAAR;AACAF,IAAAA,UAAU,CAAC,IAAD,CAAV,CAHU,CAKV;;AACA,QAAI;AACF;AACA,YAAMI,QAAQ,GAAI,GAAEX,OAAQ,SAAQG,OAAQ,YAAWF,OAAQ,EAA/D;AACA,YAAMW,MAAM,GAAG,MAAM,CAAC,MAAMC,KAAK,CAACF,QAAD,CAAZ,EAAwBG,IAAxB,EAArB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAZ,EAJE,CAMF;;AACA,YAAMK,eAAe,GAAI,GAAEjB,OAAQ,SAAQG,OAAQ,oBAAmBF,OAAQ,EAA9E;AACA,YAAMiB,aAAa,GAAG,MAAM,CAAC,MAAML,KAAK,CAACI,eAAD,CAAZ,EAA+BH,IAA/B,EAA5B;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYE,aAAZ;AACD,KAVD,CAUE,OAAOV,KAAP,EAAc;AACdC,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,KAlBS,CAmBV;;;AACAF,IAAAA,UAAU,CAAC,KAAD,CAAV;AACD,GAtB0B,EAuB3B;AACA,GAACJ,OAAD,CAxB2B,CAA7B,CALwC,CAgCxC;;AACAL,EAAAA,SAAS,CAAC,MAAM;AACdY,IAAAA,SAAS;AACV,GAFQ,EAEN,CAACA,SAAD,CAFM,CAAT,CAjCwC,CAqCxC;;AACA,SAAO,CAACN,KAAD,EAAQE,OAAR,EAAiBE,KAAjB,CAAP;AACD,CAvCM","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\r\nimport { API_URL, API_KEY } from \"../../config\";\r\n\r\nexport const useMovieFetch = (movieId) => {\r\n  const [state, setState] = useState({});\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(false);\r\n\r\n  const fetchData = useCallback(\r\n    async () => {\r\n      // voordat je de data ophaalt\r\n      setError(false);\r\n      setLoading(true);\r\n\r\n      // ophalen van de gegevens in een try {} catch(error) {} block\r\n      try {\r\n        //ophalen van de movie gegevens obv movieId\r\n        const endpoint = `${API_URL}movie/${movieId}?api_key=${API_KEY}`;\r\n        const result = await (await fetch(endpoint)).json();\r\n        console.log(result);\r\n\r\n        //ophalen van de credits gegevens obv movieId\r\n        const creditsEndpoint = `${API_URL}movie/${movieId}/credits?api_key=${API_KEY}`;\r\n        const creditsResult = await (await fetch(creditsEndpoint)).json();\r\n        console.log(creditsResult);\r\n      } catch (error) {\r\n        setError(true);\r\n      }\r\n      // nadat je de gegevens hebt opgehaald\r\n      setLoading(false);\r\n    },\r\n    // gegevens alleen ophalen als de movieId verandert\r\n    [movieId]\r\n  );\r\n\r\n  // uitvoeren van de functie fetchData\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, [fetchData]);\r\n\r\n  //teruggeven van de data\r\n  return [state, loading, error];\r\n};\r\n"]},"metadata":{},"sourceType":"module"}