{"ast":null,"code":"import { useState, useEffect, useCallback } from \"react\";\nimport { API_URL, API_KEY } from \"../../config\";\nexport const useMovieFetch = movieId => {\n  const [state, setState] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n  const fetchData = useCallback(async () => {\n    // voordat je de data ophaalt\n    setError(false);\n    setLoading(true); // ophalen van de gegevens in een try {} catch(error) {} block\n\n    try {\n      //ophalen van de movie gegevens obv movieId\n      const endpoint = `${API_URL}movie/${movieId}?api_key=${API_KEY}`;\n      const result = await (await fetch(endpoint)).json(); //ophalen van de credits gegevens obv movieId\n\n      const creditsEndpoint = `${API_URL}movie/${movieId}/credits?api_key=${API_KEY}`;\n      const creditsResult = await (await fetch(creditsEndpoint)).json(); // filter de uit de creditsgegeven / crew de job van director\n\n      const directors = creditsResult.crew.filter(member => member.job === \"Director\"); // wijzig de state dmv Setstate\n\n      setState({ ...result,\n        actors: creditsResult.cast,\n        directors\n      });\n    } catch (error) {\n      setError(true);\n    } // nadat je de gegevens hebt opgehaald\n\n\n    setLoading(false);\n  }, // gegevens alleen ophalen als de movieId verandert\n  [movieId]); // uitvoeren van de functie fetchData\n\n  useEffect(() => {\n    if (localStorage[movieId]) {\n      setState(JSON.parse(localStorage[movieId]));\n      setLoading(false);\n    } else {\n      fetchData();\n    }\n  }, [fetchData, movieId]); // data opslaan local storage\n\n  useEffect(() => {\n    localStorage.setItem(movieId, JSON.stringify(state));\n  }, [movieId, state]); //teruggeven van de data\n\n  return [state, loading, error];\n};","map":{"version":3,"sources":["C:/Users/Jook/reactprojects/reactmovieapp/movieapp/src/components/hooks/useMovieFetch.js"],"names":["useState","useEffect","useCallback","API_URL","API_KEY","useMovieFetch","movieId","state","setState","loading","setLoading","error","setError","fetchData","endpoint","result","fetch","json","creditsEndpoint","creditsResult","directors","crew","filter","member","job","actors","cast","localStorage","JSON","parse","setItem","stringify"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,WAA9B,QAAiD,OAAjD;AACA,SAASC,OAAT,EAAkBC,OAAlB,QAAiC,cAAjC;AAEA,OAAO,MAAMC,aAAa,GAAIC,OAAD,IAAa;AACxC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACW,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,KAAD,CAAlC;AAEA,QAAMa,SAAS,GAAGX,WAAW,CAC3B,YAAY;AACV;AACAU,IAAAA,QAAQ,CAAC,KAAD,CAAR;AACAF,IAAAA,UAAU,CAAC,IAAD,CAAV,CAHU,CAKV;;AACA,QAAI;AACF;AACA,YAAMI,QAAQ,GAAI,GAAEX,OAAQ,SAAQG,OAAQ,YAAWF,OAAQ,EAA/D;AACA,YAAMW,MAAM,GAAG,MAAM,CAAC,MAAMC,KAAK,CAACF,QAAD,CAAZ,EAAwBG,IAAxB,EAArB,CAHE,CAKF;;AACA,YAAMC,eAAe,GAAI,GAAEf,OAAQ,SAAQG,OAAQ,oBAAmBF,OAAQ,EAA9E;AACA,YAAMe,aAAa,GAAG,MAAM,CAAC,MAAMH,KAAK,CAACE,eAAD,CAAZ,EAA+BD,IAA/B,EAA5B,CAPE,CAQF;;AACA,YAAMG,SAAS,GAAGD,aAAa,CAACE,IAAd,CAAmBC,MAAnB,CACfC,MAAD,IAAYA,MAAM,CAACC,GAAP,KAAe,UADX,CAAlB,CATE,CAaF;;AACAhB,MAAAA,QAAQ,CAAC,EACP,GAAGO,MADI;AAEPU,QAAAA,MAAM,EAAEN,aAAa,CAACO,IAFf;AAGPN,QAAAA;AAHO,OAAD,CAAR;AAKD,KAnBD,CAmBE,OAAOT,KAAP,EAAc;AACdC,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,KA3BS,CA4BV;;;AACAF,IAAAA,UAAU,CAAC,KAAD,CAAV;AACD,GA/B0B,EAgC3B;AACA,GAACJ,OAAD,CAjC2B,CAA7B,CALwC,CAyCxC;;AACAL,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI0B,YAAY,CAACrB,OAAD,CAAhB,EAA2B;AACzBE,MAAAA,QAAQ,CAACoB,IAAI,CAACC,KAAL,CAAWF,YAAY,CAACrB,OAAD,CAAvB,CAAD,CAAR;AACAI,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAHD,MAGO;AACLG,MAAAA,SAAS;AACV;AACF,GAPQ,EAON,CAACA,SAAD,EAAYP,OAAZ,CAPM,CAAT,CA1CwC,CAmDxC;;AACAL,EAAAA,SAAS,CAAC,MAAM;AACd0B,IAAAA,YAAY,CAACG,OAAb,CAAqBxB,OAArB,EAA8BsB,IAAI,CAACG,SAAL,CAAexB,KAAf,CAA9B;AACD,GAFQ,EAEN,CAACD,OAAD,EAAUC,KAAV,CAFM,CAAT,CApDwC,CAwDxC;;AACA,SAAO,CAACA,KAAD,EAAQE,OAAR,EAAiBE,KAAjB,CAAP;AACD,CA1DM","sourcesContent":["import { useState, useEffect, useCallback } from \"react\";\r\nimport { API_URL, API_KEY } from \"../../config\";\r\n\r\nexport const useMovieFetch = (movieId) => {\r\n  const [state, setState] = useState({});\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(false);\r\n\r\n  const fetchData = useCallback(\r\n    async () => {\r\n      // voordat je de data ophaalt\r\n      setError(false);\r\n      setLoading(true);\r\n\r\n      // ophalen van de gegevens in een try {} catch(error) {} block\r\n      try {\r\n        //ophalen van de movie gegevens obv movieId\r\n        const endpoint = `${API_URL}movie/${movieId}?api_key=${API_KEY}`;\r\n        const result = await (await fetch(endpoint)).json();\r\n\r\n        //ophalen van de credits gegevens obv movieId\r\n        const creditsEndpoint = `${API_URL}movie/${movieId}/credits?api_key=${API_KEY}`;\r\n        const creditsResult = await (await fetch(creditsEndpoint)).json();\r\n        // filter de uit de creditsgegeven / crew de job van director\r\n        const directors = creditsResult.crew.filter(\r\n          (member) => member.job === \"Director\"\r\n        );\r\n\r\n        // wijzig de state dmv Setstate\r\n        setState({\r\n          ...result,\r\n          actors: creditsResult.cast,\r\n          directors,\r\n        });\r\n      } catch (error) {\r\n        setError(true);\r\n      }\r\n      // nadat je de gegevens hebt opgehaald\r\n      setLoading(false);\r\n    },\r\n    // gegevens alleen ophalen als de movieId verandert\r\n    [movieId]\r\n  );\r\n\r\n  // uitvoeren van de functie fetchData\r\n  useEffect(() => {\r\n    if (localStorage[movieId]) {\r\n      setState(JSON.parse(localStorage[movieId]));\r\n      setLoading(false);\r\n    } else {\r\n      fetchData();\r\n    }\r\n  }, [fetchData, movieId]);\r\n\r\n  // data opslaan local storage\r\n  useEffect(() => {\r\n    localStorage.setItem(movieId, JSON.stringify(state));\r\n  }, [movieId, state]);\r\n\r\n  //teruggeven van de data\r\n  return [state, loading, error];\r\n};\r\n"]},"metadata":{},"sourceType":"module"}